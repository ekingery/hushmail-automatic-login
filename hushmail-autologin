#!/usr/bin/env bash

# If it exists, check ~/.private_bashrc file for login credentials
if [ -f ~/.private_bashrc ]; then
    source ~/.private_bashrc
fi

# Enter credentials here if they were not set in the ~./private_bashrc file
# Make sure to use the full email address including domain
HUSH_EMAIL=${HUSH_EMAIL:=your-email-address@hushmail.com}
HUSH_PASS=${HUSH_PASS:=your-password}

TMPDIR=${TMPDIR:=/tmp}
cookie_file=$TMPDIR/hush_cookies.txt

# Define all the constants and pre-determined form POST data
hush_login_url="https://www.hushmail.com/preview/hushmail/"
hush_auth_url="https://www.hushmail.com/preview/hushmail/authentication/?format=json"
valid_login_str='"formValidation":true}'
token_regex='name=\"form_token\" value=\"[^"]*\"'

# Make a request to the login url and grab the CSRF token
csrf_token=$(curl -sS -c $cookie_file $hush_login_url | grep -m 1 -o "$token_regex" | cut -f4 -d \")

# Pull together the form data to be posted to the auth page
form_token="form_token=$csrf_token"
form_user="hush_username=${HUSH_EMAIL}"
form_pass="hush_passphrase=${HUSH_PASS}"
form_customerid="hush_customerid=0000000000000000"
form_processajax="processAjax=authenticationform"

# Make the login request
login_result=$(curl -sS -b $cookie_file -c $cookie_file --data-urlencode $form_token --data-urlencode $form_user --data-urlencode $form_pass --data-urlencode $form_customerid --data-urlencode $form_processajax $hush_auth_url)

# Make sure the results returned from the HTTP request match a successful login
is_valid_login=$(echo $login_result | grep -o $valid_login_str)

# Cleanup
rm $cookie_file

# Exit 0 (success) if the json response indicates the login was successful
[[ $is_valid_login == $valid_login_str ]] && exit 0

# Handle the error case
echo "login failed with results: $login_result" && exit 1
